---
import AuthLayout from '../layouts/AuthLayout.astro';
import Card from '../components/atoms/Card.astro';
import Input from '../components/atoms/Input.astro';
import Button from '../components/atoms/Button.astro';
---

<AuthLayout title="Iniciar Sesión - SecureLife">
  <Card>
    <h2 class="text-2xl font-bold text-center text-gray-900 mb-6">
      Iniciar Sesión
    </h2>
    
    <form id="login-form" class="space-y-6">
      <Input
        type="email"
        name="email"
        label="Correo electrónico"
        placeholder="tu@email.com"
        required
      />
      
      <Input
        type="password"
        name="password"
        label="Contraseña"
        placeholder="Tu contraseña"
        required
      />
      
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <input
            id="remember-me"
            name="remember-me"
            type="checkbox"
            class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
          />
          <label for="remember-me" class="ml-2 block text-sm text-gray-900">
            Recordarme
          </label>
        </div>
        
        <div class="text-sm">
          <a href="/forgot-password" class="font-medium text-primary-600 hover:text-primary-500">
            ¿Olvidaste tu contraseña?
          </a>
        </div>
      </div>
      
      <Button type="submit" class="w-full">
        Iniciar Sesión
      </Button>
      
      <div class="text-center">
        <p class="text-sm text-gray-600">
          ¿No tienes una cuenta?
          <a href="/register" class="font-medium text-primary-600 hover:text-primary-500">
            Regístrate
          </a>
        </p>
      </div>
    </form>
  </Card>
</AuthLayout>

<script>
  // Importar dinámicamente para evitar problemas de SSR
  let loginFunction: any = null;

  async function initializeAuth() {
    try {
      const authModule = await import('../stores/auth');
      loginFunction = authModule.login;
      console.log('Auth module loaded successfully');
    } catch (error) {
      console.error('Error loading auth module:', error);
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', initializeAuth);

  document.getElementById('login-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    console.log('Login form submitted');
    
    // Asegurar que el módulo de auth esté cargado
    if (!loginFunction) {
      await initializeAuth();
    }
    
    if (!loginFunction) {
      alert('Error: No se pudo cargar el sistema de autenticación');
      return;
    }
    
    const formData = new FormData(e.target as HTMLFormElement);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    
    console.log('Attempting login with email:', email);
    
    // Deshabilitar el botón de envío
    const submitBtn = document.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.textContent = 'Iniciando sesión...';
    
    try {
      const result = await loginFunction(email, password);
      console.log('Login result:', result);
      
      if (result.success) {
        console.log('Login successful, redirecting...');
        // Redirigir después de un breve delay para permitir que se actualice el estado
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 500);
      } else {
        console.error('Login failed:', result.error);
        alert(result.error || 'Error al iniciar sesión');
      }
    } catch (error) {
      console.error('Error de login:', error);
      alert(`Error al iniciar sesión: ${error.message || 'Verifica tus credenciales.'}`);
    } finally {
      // Rehabilitar el botón
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    }
  });
</script>